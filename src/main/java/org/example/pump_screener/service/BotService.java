package org.example.pump_screener.service;

import org.example.pump_screener.adapters.PriceVolumeWatcher;
import org.example.pump_screener.adapters.binance.CandlestickEvent;
import org.example.pump_screener.adapters.binance.PriceAlertEvent;
import org.example.pump_screener.config.BotConfig;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;


import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@Service
public class BotService extends TelegramLongPollingBot {
    private final BotConfig config;
    private final BinanceService binanceService;
    private final PriceVolumeWatcher priceVolumeWatcher;
    private List<Long> chatIds = new ArrayList<>();

    public BotService(BotConfig config, BinanceService binanceService, PriceVolumeWatcher priceVolumeWatcher) {
        this.config = config;
        this.binanceService = binanceService;
        this.priceVolumeWatcher = priceVolumeWatcher;

        List<BotCommand> listOfBotCommands = new ArrayList<>();
        listOfBotCommands.add(new BotCommand("/start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞"));
        listOfBotCommands.add(new BotCommand("/start_monitoring_two_procent", "–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω —Å —É—Å–ª–æ–≤–∏–µ–º —Ä–æ—Å—Ç–∞ –Ω–∞ 2%."));
        try {
            execute(new SetMyCommands(listOfBotCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBot_name();
    }

    @Override
    public String getBotToken() {
        return config.getBot_token();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            switch (messageText) {
                case "/start":
                    try {
                        startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
                    } catch (TelegramApiException e) {
                        e.printStackTrace();
                    }
                    break;
                case "/start_monitoring_two_procent":
                    priceVolumeWatcher.setMonitoringTwoPercentActive(true);
                    sendMessageSafely(chatId, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω —Å —É—Å–ª–æ–≤–∏–µ–º —Ä–æ—Å—Ç–∞ –Ω–∞ 2% –∑–∞–ø—É—â–µ–Ω.");
                    break;
                default:
                    sendMessageSafely(chatId, "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª");
            }
        }
    }

    private void sendMessageSafely(long chatId, String message) {
        try {
            sendMessage(chatId, message);
        } catch (TelegramApiException e) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chatId: " + chatId + ", —Å–æ–æ–±—â–µ–Ω–∏–µ: " + message + ", –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    public void sendMessageToAllUsers(String message) {
        System.out.println("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: " + message);
        for (Long chatId : chatIds) {
            try {
                sendMessage(chatId, message);
            } catch (TelegramApiException e) {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chatId: " + chatId + ", –æ—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private void sendMessage(long chatId, String sendText) throws TelegramApiException {
        final int maxMessageLength = 4096;
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message.setText(sendText);
        message.setParseMode("Markdown"); // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        if (sendText.length() > maxMessageLength) {
            int start = 0;
            while (start < sendText.length()) {
                int end = Math.min(sendText.length(), start + maxMessageLength);
                String part = sendText.substring(start, end);
                message.setText(part);
                execute(message);
                start = end;
            }
        } else {
            execute(message);
        }
    }

    private void startCommandReceived(long chatId, String name) throws TelegramApiException {
        if (!chatIds.contains(chatId)) {
            chatIds.add(chatId);
            System.out.println("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId: " + chatId);
        }
        String answer = "–ü—Ä–∏–≤–µ—Ç " + name + ", —ç—Ç–æ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–≤–µ—á–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ ( –≤—Ä–µ–º—è 1 –º–∏–Ω—É—Ç–∞) !";
        sendMessage(chatId, answer);
    }

    @EventListener
    public void handlePriceAlert(PriceAlertEvent event) {
        String pumpOrDump = event.getPriceChange().compareTo(BigDecimal.ZERO) > 0 ? "Pump" : "Dump";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji –¥–ª—è Pump –∏ Dump
        String directionEmoji = pumpOrDump.equals("Pump") ? "üìà" : "üìâ"; // –ó–µ–ª–µ–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö (Pump) –∏–ª–∏ –∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ (Dump)
        String fireEmoji = "üî•"; // Emoji –æ–≥–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        String alertEmoji = "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è"; // –¢—Ä–∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–∞ (emoji) –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å emoji, –¥–æ–±–∞–≤–ª—è—è —Å–∏–º–≤–æ–ª –≤ –æ–±—Ä–∞—Ç–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
        String message = String.format("%s\n\n %s ` %s ` (%s)\n –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: %.2f%% %s",
                alertEmoji, directionEmoji, event.getSymbol(), pumpOrDump,
                event.getPriceChange(), fireEmoji);

        System.out.println("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: " + message);
        sendMessageToAllUsers(message);
    }

    @EventListener
    public void handleCandlestickEvent(CandlestickEvent event) {
        String symbol = event.getSymbol();
        BinanceService.Candlestick candlestick = event.getCandlestick();
        String message = String.format("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –¥–ª—è %s: –û—Ç–∫—Ä—ã—Ç–∏–µ: %s, –ó–∞–∫—Ä—ã—Ç–∏–µ: %s, –ú–∞–∫—Å.: %s, –ú–∏–Ω.: %s, –û–±—ä–µ–º: %s",
                symbol, candlestick.getOpen(), candlestick.getClose(), candlestick.getHigh(), candlestick.getLow(), candlestick.getVolume());
        System.out.println("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–≤–µ—á–∏: " + message);
        sendMessageToAllUsers(message);
    }
}